// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Laba_1\PROCESSING_UNIT_tb.v
// Created: 2023-01-12 23:32:51
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// o_Y                           ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PROCESSING_UNIT_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PROCESSING_UNIT_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire o_Y_done;  // ufix1
  wire rdEnb;
  wire o_Y_done_enb;  // ufix1
  reg [4:0] o_Y_addr;  // ufix5
  wire o_Y_active;  // ufix1
  reg [4:0] Data_Type_Conversion_out1_addr;  // ufix5
  wire [7:0] i_X3_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_X3_1;  // ufix8
  wire signed [7:0] rawData_i_X3;  // int8
  reg signed [7:0] holdData_i_X3;  // int8
  reg signed [7:0] i_X3_offset;  // int8
  wire signed [7:0] i_X3_2;  // int8
  wire [7:0] i_X2_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_X2_1;  // ufix8
  wire signed [7:0] rawData_i_X2;  // int8
  reg signed [7:0] holdData_i_X2;  // int8
  reg signed [7:0] i_X2_offset;  // int8
  wire signed [7:0] i_X2_2;  // int8
  wire [7:0] i_X1_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_X1_1;  // ufix8
  wire signed [7:0] rawData_i_X1;  // int8
  reg signed [7:0] holdData_i_X1;  // int8
  reg signed [7:0] i_X1_offset;  // int8
  wire signed [7:0] i_X1_2;  // int8
  wire [7:0] i_X0_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_X0_1;  // ufix8
  wire signed [7:0] rawData_i_X0;  // int8
  reg signed [7:0] holdData_i_X0;  // int8
  reg signed [7:0] i_X0_offset;  // int8
  wire signed [7:0] i_X0_2;  // int8
  wire [7:0] i_W3_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_W3_1;  // ufix8
  wire signed [7:0] rawData_i_W3;  // int8
  reg signed [7:0] holdData_i_W3;  // int8
  reg signed [7:0] i_W3_offset;  // int8
  wire signed [7:0] i_W3_2;  // int8
  wire [7:0] i_W2_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_W2_1;  // ufix8
  wire signed [7:0] rawData_i_W2;  // int8
  reg signed [7:0] holdData_i_W2;  // int8
  reg signed [7:0] i_W2_offset;  // int8
  wire signed [7:0] i_W2_2;  // int8
  wire [7:0] i_W1_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_W1_1;  // ufix8
  wire signed [7:0] rawData_i_W1;  // int8
  reg signed [7:0] holdData_i_W1;  // int8
  reg signed [7:0] i_W1_offset;  // int8
  wire signed [7:0] i_W1_2;  // int8
  wire Data_Type_Conversion_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Data_Type_Conversion_out1_enb;  // ufix1
  wire [7:0] i_W0_table_data [0:20];  // ufix8 [21]
  wire [7:0] i_W0_1;  // ufix8
  wire signed [7:0] rawData_i_W0;  // int8
  reg signed [7:0] holdData_i_W0;  // int8
  reg signed [7:0] i_W0_offset;  // int8
  wire signed [7:0] i_W0_2;  // int8
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire signed [15:0] o_Y;  // int16
  wire o_Y_enb;  // ufix1
  wire o_Y_lastAddr;  // ufix1
  wire [15:0] o_Y_expected_table_data [0:20];  // ufix16 [21]
  wire [15:0] o_Y_expected_1;  // ufix16
  wire signed [15:0] o_Y_expected_2;  // int16
  wire signed [15:0] o_Y_ref;  // int16
  reg  o_Y_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign o_Y_done_enb = o_Y_done & rdEnb;



  assign o_Y_active = o_Y_addr != 5'b10100;



  // Data source for i_X3
  assign i_X3_table_data[0] = 8'b10111011;
  assign i_X3_table_data[1] = 8'b11001010;
  assign i_X3_table_data[2] = 8'b11001110;
  assign i_X3_table_data[3] = 8'b00110101;
  assign i_X3_table_data[4] = 8'b01001110;
  assign i_X3_table_data[5] = 8'b01000011;
  assign i_X3_table_data[6] = 8'b10010110;
  assign i_X3_table_data[7] = 8'b11100111;
  assign i_X3_table_data[8] = 8'b00100101;
  assign i_X3_table_data[9] = 8'b00011010;
  assign i_X3_table_data[10] = 8'b11110101;
  assign i_X3_table_data[11] = 8'b11111100;
  assign i_X3_table_data[12] = 8'b00011011;
  assign i_X3_table_data[13] = 8'b01101011;
  assign i_X3_table_data[14] = 8'b01101000;
  assign i_X3_table_data[15] = 8'b01000101;
  assign i_X3_table_data[16] = 8'b10000111;
  assign i_X3_table_data[17] = 8'b10100110;
  assign i_X3_table_data[18] = 8'b00000001;
  assign i_X3_table_data[19] = 8'b11010000;
  assign i_X3_table_data[20] = 8'b11111110;
  assign i_X3_1 = i_X3_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_X3 = i_X3_1;



  // holdData reg for Data_Type_Conversion7_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion7_out1
      if (reset) begin
        holdData_i_X3 <= 8'bx;
      end
      else begin
        holdData_i_X3 <= rawData_i_X3;
      end
    end

  always @(rawData_i_X3 or rdEnb)
    begin : stimuli_Data_Type_Conversion7_out1_1
      if (rdEnb == 1'b0) begin
        i_X3_offset <= holdData_i_X3;
      end
      else begin
        i_X3_offset <= rawData_i_X3;
      end
    end

  assign #2 i_X3_2 = i_X3_offset;

  // Data source for i_X2
  assign i_X2_table_data[0] = 8'b00110111;
  assign i_X2_table_data[1] = 8'b01010011;
  assign i_X2_table_data[2] = 8'b01110100;
  assign i_X2_table_data[3] = 8'b00011101;
  assign i_X2_table_data[4] = 8'b11011111;
  assign i_X2_table_data[5] = 8'b10001111;
  assign i_X2_table_data[6] = 8'b01111000;
  assign i_X2_table_data[7] = 8'b11010011;
  assign i_X2_table_data[8] = 8'b11000111;
  assign i_X2_table_data[9] = 8'b00010010;
  assign i_X2_table_data[10] = 8'b11000100;
  assign i_X2_table_data[11] = 8'b10000011;
  assign i_X2_table_data[12] = 8'b11110110;
  assign i_X2_table_data[13] = 8'b10110100;
  assign i_X2_table_data[14] = 8'b11000000;
  assign i_X2_table_data[15] = 8'b11010111;
  assign i_X2_table_data[16] = 8'b00010101;
  assign i_X2_table_data[17] = 8'b00100100;
  assign i_X2_table_data[18] = 8'b01111001;
  assign i_X2_table_data[19] = 8'b00111100;
  assign i_X2_table_data[20] = 8'b10100010;
  assign i_X2_1 = i_X2_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_X2 = i_X2_1;



  // holdData reg for Data_Type_Conversion6_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion6_out1
      if (reset) begin
        holdData_i_X2 <= 8'bx;
      end
      else begin
        holdData_i_X2 <= rawData_i_X2;
      end
    end

  always @(rawData_i_X2 or rdEnb)
    begin : stimuli_Data_Type_Conversion6_out1_1
      if (rdEnb == 1'b0) begin
        i_X2_offset <= holdData_i_X2;
      end
      else begin
        i_X2_offset <= rawData_i_X2;
      end
    end

  assign #2 i_X2_2 = i_X2_offset;

  // Data source for i_X1
  assign i_X1_table_data[0] = 8'b10110101;
  assign i_X1_table_data[1] = 8'b11011110;
  assign i_X1_table_data[2] = 8'b00011011;
  assign i_X1_table_data[3] = 8'b00000101;
  assign i_X1_table_data[4] = 8'b01101111;
  assign i_X1_table_data[5] = 8'b11011001;
  assign i_X1_table_data[6] = 8'b01011010;
  assign i_X1_table_data[7] = 8'b11000000;
  assign i_X1_table_data[8] = 8'b01101000;
  assign i_X1_table_data[9] = 8'b00001001;
  assign i_X1_table_data[10] = 8'b10010011;
  assign i_X1_table_data[11] = 8'b00001010;
  assign i_X1_table_data[12] = 8'b11010001;
  assign i_X1_table_data[13] = 8'b11111100;
  assign i_X1_table_data[14] = 8'b00010110;
  assign i_X1_table_data[15] = 8'b01101000;
  assign i_X1_table_data[16] = 8'b10100011;
  assign i_X1_table_data[17] = 8'b10100010;
  assign i_X1_table_data[18] = 8'b11110011;
  assign i_X1_table_data[19] = 8'b10101010;
  assign i_X1_table_data[20] = 8'b01000101;
  assign i_X1_1 = i_X1_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_X1 = i_X1_1;



  // holdData reg for Data_Type_Conversion5_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion5_out1
      if (reset) begin
        holdData_i_X1 <= 8'bx;
      end
      else begin
        holdData_i_X1 <= rawData_i_X1;
      end
    end

  always @(rawData_i_X1 or rdEnb)
    begin : stimuli_Data_Type_Conversion5_out1_1
      if (rdEnb == 1'b0) begin
        i_X1_offset <= holdData_i_X1;
      end
      else begin
        i_X1_offset <= rawData_i_X1;
      end
    end

  assign #2 i_X1_2 = i_X1_offset;

  // Data source for i_X0
  assign i_X0_table_data[0] = 8'b00110001;
  assign i_X0_table_data[1] = 8'b01100111;
  assign i_X0_table_data[2] = 8'b11000001;
  assign i_X0_table_data[3] = 8'b11101101;
  assign i_X0_table_data[4] = 8'b00000001;
  assign i_X0_table_data[5] = 8'b00100011;
  assign i_X0_table_data[6] = 8'b00111101;
  assign i_X0_table_data[7] = 8'b10101100;
  assign i_X0_table_data[8] = 8'b00001001;
  assign i_X0_table_data[9] = 8'b00000001;
  assign i_X0_table_data[10] = 8'b01100001;
  assign i_X0_table_data[11] = 8'b10010010;
  assign i_X0_table_data[12] = 8'b10101100;
  assign i_X0_table_data[13] = 8'b01000100;
  assign i_X0_table_data[14] = 8'b01101100;
  assign i_X0_table_data[15] = 8'b11111010;
  assign i_X0_table_data[16] = 8'b00110000;
  assign i_X0_table_data[17] = 8'b00011111;
  assign i_X0_table_data[18] = 8'b01101011;
  assign i_X0_table_data[19] = 8'b00010111;
  assign i_X0_table_data[20] = 8'b11101001;
  assign i_X0_1 = i_X0_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_X0 = i_X0_1;



  // holdData reg for Data_Type_Conversion4_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion4_out1
      if (reset) begin
        holdData_i_X0 <= 8'bx;
      end
      else begin
        holdData_i_X0 <= rawData_i_X0;
      end
    end

  always @(rawData_i_X0 or rdEnb)
    begin : stimuli_Data_Type_Conversion4_out1_1
      if (rdEnb == 1'b0) begin
        i_X0_offset <= holdData_i_X0;
      end
      else begin
        i_X0_offset <= rawData_i_X0;
      end
    end

  assign #2 i_X0_2 = i_X0_offset;

  // Data source for i_W3
  assign i_W3_table_data[0] = 8'b10101110;
  assign i_W3_table_data[1] = 8'b11110010;
  assign i_W3_table_data[2] = 8'b01100111;
  assign i_W3_table_data[3] = 8'b11010100;
  assign i_W3_table_data[4] = 8'b10010010;
  assign i_W3_table_data[5] = 8'b01101101;
  assign i_W3_table_data[6] = 8'b00011111;
  assign i_W3_table_data[7] = 8'b10011000;
  assign i_W3_table_data[8] = 8'b10101011;
  assign i_W3_table_data[9] = 8'b11111000;
  assign i_W3_table_data[10] = 8'b00110000;
  assign i_W3_table_data[11] = 8'b00011001;
  assign i_W3_table_data[12] = 8'b10000111;
  assign i_W3_table_data[13] = 8'b10001101;
  assign i_W3_table_data[14] = 8'b11000011;
  assign i_W3_table_data[15] = 8'b10001100;
  assign i_W3_table_data[16] = 8'b10111110;
  assign i_W3_table_data[17] = 8'b10011110;
  assign i_W3_table_data[18] = 8'b11100100;
  assign i_W3_table_data[19] = 8'b10000101;
  assign i_W3_table_data[20] = 8'b10001101;
  assign i_W3_1 = i_W3_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_W3 = i_W3_1;



  // holdData reg for Data_Type_Conversion3_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion3_out1
      if (reset) begin
        holdData_i_W3 <= 8'bx;
      end
      else begin
        holdData_i_W3 <= rawData_i_W3;
      end
    end

  always @(rawData_i_W3 or rdEnb)
    begin : stimuli_Data_Type_Conversion3_out1_1
      if (rdEnb == 1'b0) begin
        i_W3_offset <= holdData_i_W3;
      end
      else begin
        i_W3_offset <= rawData_i_W3;
      end
    end

  assign #2 i_W3_2 = i_W3_offset;

  // Data source for i_W2
  assign i_W2_table_data[0] = 8'b00101010;
  assign i_W2_table_data[1] = 8'b01111100;
  assign i_W2_table_data[2] = 8'b00001110;
  assign i_W2_table_data[3] = 8'b10111100;
  assign i_W2_table_data[4] = 8'b00100011;
  assign i_W2_table_data[5] = 8'b10111000;
  assign i_W2_table_data[6] = 8'b00000001;
  assign i_W2_table_data[7] = 8'b10000100;
  assign i_W2_table_data[8] = 8'b01001100;
  assign i_W2_table_data[9] = 8'b11101111;
  assign i_W2_table_data[10] = 8'b11111111;
  assign i_W2_table_data[11] = 8'b10100001;
  assign i_W2_table_data[12] = 8'b01100001;
  assign i_W2_table_data[13] = 8'b11010101;
  assign i_W2_table_data[14] = 8'b00011010;
  assign i_W2_table_data[15] = 8'b00011101;
  assign i_W2_table_data[16] = 8'b01001100;
  assign i_W2_table_data[17] = 8'b00011011;
  assign i_W2_table_data[18] = 8'b01011101;
  assign i_W2_table_data[19] = 8'b11110010;
  assign i_W2_table_data[20] = 8'b00110000;
  assign i_W2_1 = i_W2_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_W2 = i_W2_1;



  // holdData reg for Data_Type_Conversion2_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion2_out1
      if (reset) begin
        holdData_i_W2 <= 8'bx;
      end
      else begin
        holdData_i_W2 <= rawData_i_W2;
      end
    end

  always @(rawData_i_W2 or rdEnb)
    begin : stimuli_Data_Type_Conversion2_out1_1
      if (rdEnb == 1'b0) begin
        i_W2_offset <= holdData_i_W2;
      end
      else begin
        i_W2_offset <= rawData_i_W2;
      end
    end

  assign #2 i_W2_2 = i_W2_offset;

  // Data source for i_W1
  assign i_W1_table_data[0] = 8'b10101000;
  assign i_W1_table_data[1] = 8'b00000110;
  assign i_W1_table_data[2] = 8'b10110100;
  assign i_W1_table_data[3] = 8'b10100100;
  assign i_W1_table_data[4] = 8'b10110100;
  assign i_W1_table_data[5] = 8'b00000010;
  assign i_W1_table_data[6] = 8'b11100100;
  assign i_W1_table_data[7] = 8'b01101111;
  assign i_W1_table_data[8] = 8'b11101110;
  assign i_W1_table_data[9] = 8'b11100111;
  assign i_W1_table_data[10] = 8'b11001110;
  assign i_W1_table_data[11] = 8'b00100111;
  assign i_W1_table_data[12] = 8'b00111100;
  assign i_W1_table_data[13] = 8'b00011101;
  assign i_W1_table_data[14] = 8'b01110000;
  assign i_W1_table_data[15] = 8'b10101111;
  assign i_W1_table_data[16] = 8'b11011010;
  assign i_W1_table_data[17] = 8'b10011001;
  assign i_W1_table_data[18] = 8'b11010110;
  assign i_W1_table_data[19] = 8'b01011111;
  assign i_W1_table_data[20] = 8'b11010100;
  assign i_W1_1 = i_W1_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_W1 = i_W1_1;



  // holdData reg for Data_Type_Conversion1_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion1_out1
      if (reset) begin
        holdData_i_W1 <= 8'bx;
      end
      else begin
        holdData_i_W1 <= rawData_i_W1;
      end
    end

  always @(rawData_i_W1 or rdEnb)
    begin : stimuli_Data_Type_Conversion1_out1_1
      if (rdEnb == 1'b0) begin
        i_W1_offset <= holdData_i_W1;
      end
      else begin
        i_W1_offset <= rawData_i_W1;
      end
    end

  assign #2 i_W1_2 = i_W1_offset;

  assign Data_Type_Conversion_out1_active = Data_Type_Conversion_out1_addr != 5'b10100;



  assign Data_Type_Conversion_out1_enb = Data_Type_Conversion_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 20
  always @(posedge clk or posedge reset)
    begin : DataTypeConversion_process
      if (reset == 1'b1) begin
        Data_Type_Conversion_out1_addr <= 5'b00000;
      end
      else begin
        if (Data_Type_Conversion_out1_enb) begin
          if (Data_Type_Conversion_out1_addr >= 5'b10100) begin
            Data_Type_Conversion_out1_addr <= 5'b00000;
          end
          else begin
            Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + 5'b00001;
          end
        end
      end
    end



  // Data source for i_W0
  assign i_W0_table_data[0] = 8'b00100100;
  assign i_W0_table_data[1] = 8'b10010001;
  assign i_W0_table_data[2] = 8'b01011010;
  assign i_W0_table_data[3] = 8'b10001100;
  assign i_W0_table_data[4] = 8'b01000100;
  assign i_W0_table_data[5] = 8'b01001100;
  assign i_W0_table_data[6] = 8'b11000110;
  assign i_W0_table_data[7] = 8'b01011011;
  assign i_W0_table_data[8] = 8'b10010000;
  assign i_W0_table_data[9] = 8'b11011110;
  assign i_W0_table_data[10] = 8'b10011101;
  assign i_W0_table_data[11] = 8'b10101111;
  assign i_W0_table_data[12] = 8'b00011000;
  assign i_W0_table_data[13] = 8'b01100101;
  assign i_W0_table_data[14] = 8'b11000111;
  assign i_W0_table_data[15] = 8'b00111111;
  assign i_W0_table_data[16] = 8'b01100111;
  assign i_W0_table_data[17] = 8'b00010111;
  assign i_W0_table_data[18] = 8'b01001110;
  assign i_W0_table_data[19] = 8'b11001101;
  assign i_W0_table_data[20] = 8'b01110111;
  assign i_W0_1 = i_W0_table_data[Data_Type_Conversion_out1_addr];



  assign rawData_i_W0 = i_W0_1;



  // holdData reg for Data_Type_Conversion_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion_out1
      if (reset) begin
        holdData_i_W0 <= 8'bx;
      end
      else begin
        holdData_i_W0 <= rawData_i_W0;
      end
    end

  always @(rawData_i_W0 or rdEnb)
    begin : stimuli_Data_Type_Conversion_out1_1
      if (rdEnb == 1'b0) begin
        i_W0_offset <= holdData_i_W0;
      end
      else begin
        i_W0_offset <= rawData_i_W0;
      end
    end

  assign #2 i_W0_2 = i_W0_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  PROCESSING_UNIT u_PROCESSING_UNIT (.clk(clk),
                                     .reset(reset),
                                     .clk_enable(clk_enable),
                                     .i_W0(i_W0_2),  // int8
                                     .i_W1(i_W1_2),  // int8
                                     .i_W2(i_W2_2),  // int8
                                     .i_W3(i_W3_2),  // int8
                                     .i_X0(i_X0_2),  // int8
                                     .i_X1(i_X1_2),  // int8
                                     .i_X2(i_X2_2),  // int8
                                     .i_X3(i_X3_2),  // int8
                                     .ce_out(ce_out),
                                     .o_Y(o_Y)  // int16
                                     );

  assign o_Y_enb = ce_out & o_Y_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 20
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        o_Y_addr <= 5'b00000;
      end
      else begin
        if (o_Y_enb) begin
          if (o_Y_addr >= 5'b10100) begin
            o_Y_addr <= 5'b00000;
          end
          else begin
            o_Y_addr <= o_Y_addr + 5'b00001;
          end
        end
      end
    end



  assign o_Y_lastAddr = o_Y_addr >= 5'b10100;



  assign o_Y_done = o_Y_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (o_Y_done_enb) begin
          check1_done <= o_Y_done;
        end
      end
    end

  // Data source for o_Y_expected
  assign o_Y_expected_table_data[0] = 16'b0000000000000000;
  assign o_Y_expected_table_data[1] = 16'b0000000000000000;
  assign o_Y_expected_table_data[2] = 16'b0011111111001100;
  assign o_Y_expected_table_data[3] = 16'b1111110110110011;
  assign o_Y_expected_table_data[4] = 16'b1101010000010000;
  assign o_Y_expected_table_data[5] = 16'b1111011000000000;
  assign o_Y_expected_table_data[6] = 16'b1011100101001001;
  assign o_Y_expected_table_data[7] = 16'b0100011001100101;
  assign o_Y_expected_table_data[8] = 16'b1101101111111000;
  assign o_Y_expected_table_data[9] = 16'b1110011001011000;
  assign o_Y_expected_table_data[10] = 16'b1101011110001011;
  assign o_Y_expected_table_data[11] = 16'b1111110011111011;
  assign o_Y_expected_table_data[12] = 16'b1110110111110011;
  assign o_Y_expected_table_data[13] = 16'b0101001001010011;
  assign o_Y_expected_table_data[14] = 16'b1101110010001111;
  assign o_Y_expected_table_data[15] = 16'b1111011100010011;
  assign o_Y_expected_table_data[16] = 16'b1101001001001100;
  assign o_Y_expected_table_data[17] = 16'b1011100110110101;
  assign o_Y_expected_table_data[18] = 16'b0100011010001100;
  assign o_Y_expected_table_data[19] = 16'b0100111011011011;
  assign o_Y_expected_table_data[20] = 16'b0100111010010101;
  assign o_Y_expected_1 = o_Y_expected_table_data[o_Y_addr];



  assign o_Y_expected_2 = o_Y_expected_1;



  assign o_Y_ref = o_Y_expected_2;

  always @(posedge clk or posedge reset)
    begin : o_Y_checker
      if (reset == 1'b1) begin
        o_Y_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && o_Y !== o_Y_ref) begin
          o_Y_testFailure <= 1'b1;
          $display("ERROR in o_Y at time %t : Expected '%h' Actual '%h'", $time, o_Y_ref, o_Y);
        end
      end
    end

  assign testFailure = o_Y_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // PROCESSING_UNIT_tb

